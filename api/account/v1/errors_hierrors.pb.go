// Code generated by protoc-plugin-hi-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

const _ = errors.SupportPackageIsVersion1

func IsInternalError(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_InternalError.String() && e.Code == 1
}

func ErrorInternalError(format string, args ...interface{}) *errors.Error {
	return errors.New(1, ErrorReason_InternalError.String(), fmt.Sprintf(format, args...))
}

func IsDbError(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DbError.String() && e.Code == 2
}

func ErrorDbError(format string, args ...interface{}) *errors.Error {
	return errors.New(2, ErrorReason_DbError.String(), fmt.Sprintf(format, args...))
}

func IsInvalidParameter(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_InvalidParameter.String() && e.Code == 7
}

func ErrorInvalidParameter(format string, args ...interface{}) *errors.Error {
	return errors.New(7, ErrorReason_InvalidParameter.String(), fmt.Sprintf(format, args...))
}

func IsTimeout(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_Timeout.String() && e.Code == 9
}

func ErrorTimeout(format string, args ...interface{}) *errors.Error {
	return errors.New(9, ErrorReason_Timeout.String(), fmt.Sprintf(format, args...))
}

func IsUnauthenticated(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_Unauthenticated.String() && e.Code == 11
}

func ErrorUnauthenticated(format string, args ...interface{}) *errors.Error {
	return errors.New(11, ErrorReason_Unauthenticated.String(), fmt.Sprintf(format, args...))
}

func IsRecordNotFound(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RecordNotFound.String() && e.Code == 12
}

func ErrorRecordNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(12, ErrorReason_RecordNotFound.String(), fmt.Sprintf(format, args...))
}

func IsRecordIsExists(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RecordIsExists.String() && e.Code == 13
}

func ErrorRecordIsExists(format string, args ...interface{}) *errors.Error {
	return errors.New(13, ErrorReason_RecordIsExists.String(), fmt.Sprintf(format, args...))
}

func IsRedisExistError(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RedisExistError.String() && e.Code == 14
}

func ErrorRedisExistError(format string, args ...interface{}) *errors.Error {
	return errors.New(14, ErrorReason_RedisExistError.String(), fmt.Sprintf(format, args...))
}

func IsRedisGetError(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RedisGetError.String() && e.Code == 15
}

func ErrorRedisGetError(format string, args ...interface{}) *errors.Error {
	return errors.New(15, ErrorReason_RedisGetError.String(), fmt.Sprintf(format, args...))
}

func IsNoAccess(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NoAccess.String() && e.Code == 30
}

func ErrorNoAccess(format string, args ...interface{}) *errors.Error {
	return errors.New(30, ErrorReason_NoAccess.String(), fmt.Sprintf(format, args...))
}

func IsGrpcError(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GrpcError.String() && e.Code == 50
}

func ErrorGrpcError(format string, args ...interface{}) *errors.Error {
	return errors.New(50, ErrorReason_GrpcError.String(), fmt.Sprintf(format, args...))
}

func IsHttpError(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_HttpError.String() && e.Code == 51
}

func ErrorHttpError(format string, args ...interface{}) *errors.Error {
	return errors.New(51, ErrorReason_HttpError.String(), fmt.Sprintf(format, args...))
}

func IsCaptchaError(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CaptchaError.String() && e.Code == 52
}

func ErrorCaptchaError(format string, args ...interface{}) *errors.Error {
	return errors.New(52, ErrorReason_CaptchaError.String(), fmt.Sprintf(format, args...))
}

func IsAccountPwdError(err error) bool {
	e := errors.FromError(err)
	return e.Reason == ErrorReason_AccountPwdError.String() && e.Code == 53
}

func ErrorAccountPwdError(format string, args ...interface{}) *errors.Error {
	return errors.New(53, ErrorReason_AccountPwdError.String(), fmt.Sprintf(format, args...))
}
